{
    "abstract": "In this paper, we look at logics of change on the basis of the following two simplifying assumptions: (1) the world is a collection of facts (Wittgenstein), and (2), the world can be changed by changing elementary facts (Marx). The motivation is that we want to study the logic of imperatives in the simplest possible setting. We will explore some logics of change, focussing on the command to change the world in such a way that an elementary proposition becomes true or false. 1 Introduction  In natural language, the distinction between imperative mode and declarative mode is made by assuming that declarative sentences describe a state of the world, while imperative sentences convey an intention of the speaker that the addressee takes responsibility for changing the world in some particular way. We look at some simple logical languages where commands to change the world are interpreted literally as transitions that make things happen by effecting the desired change. 2 The Logic of Action ...",
    "author": "Jan van Eijck",
    "citation_contexts": [
        "ome in a setting where we distinguish between actual change in the world and intended changes of the world, where the addressee is made responsible for the change. See recent work of Noel Belnap c.s. =-=[1]-=- for this refinement, which is beyond the scope of the present paper. The third shortcoming is addressed in the next section. 8 The Logic of Action With Repercussion What does it mean that a basic act",
        "' function NS('; \ufffd\ufffd) which computes the next state condition of every command \ufffd\ufffd, given a formula of propositional logic ' specifying the initial state (the definition is in the spirit of Van =-=Benthem [2]): NS('; p?) := 'sp NS('; :p?) :-=-= 's:p NS('; p := 1) := '[+p] NS('; p := 0) := '[\\Gammap] NS('; \ufffd\ufffd 1 ; \ufffd\ufffd 2 ) := NS(NS('; \ufffd\ufffd 1 ); \ufffd\ufffd 2 ) NS('; \ufffd\ufffd 1 [ \ufffd\ufffd 2 ) := NS('; \ufffd\ufffd 1 )sNS('; \ufffd\ufffd 2 ): It is easy to",
        "ere X is a finite list of procedures from the language. Structural rules are left monotonicity and compositional cut (well known from the structural analysis of dynamic inference modes in Van Benthem =-=[3]), plus rest-=-ricted forms of contraction, weakening and permutation. Since ; is clearly associative, we do not bother to write brackets in \ufffd\ufffd 1 ; \ufffd\ufffd 2 \ufffd\ufffd 3 , and we dispense with a rule that spells out mplete, note that the axioms and rules encode the principles underlying the analysis of the previous section. The notion \ufffd\ufffd 1 j= \ufffd\ufffd 2 that we have analysed is called `update-to-domain' consequ=-=ence in [3]. One might ask whether -=-there are other reasonable notions of `command consequence'? Here are some candidates: ffl \ufffd\ufffd 1 j= 2 \ufffd\ufffd 2 iff [[\ufffd\ufffd 1 ; \ufffd\ufffd 2 ]] 6= ; (command \ufffd\ufffd 1 logically implies command \ufffd\ufffd 2 (command \ufffd\ufffd 1 logically implies command \ufffd\ufffd 2 if performing \ufffd\ufffd 1 makes execution of \ufffd\ufffd 2 superfluous). These possibilities are additions to the list of dynamic consequence notions that =-=is discussed in [3]-=-. 5 Action Without Repercussion over Subset Models A subset model M is a non-empty subset of f0; 1g P . Interpret the update commands as follows in M : [[p := 1]] M := fhv; wi j v; w 2 M;w = v(pj1)g [",
        "lt that we end up in a world where q holds, then, in a minimalist sense, p causes q. Of course, there is much more to be said about causation in connection with the logic of action (see, e.g., Shoham =-=[4]). Some obvious axioms for t-=-his system are: 1. All instantiations of axiom schemas of propositional logic. 2. [\ufffd\ufffd](' ! /) ! ([\ufffd\ufffd]' ! [\ufffd\ufffd]/) 3. [p := 1]p , [p := 0]:p. 4. [\ufffd\ufffd 1 ; \ufffd\ufffd 2 ]' $ [\ufffd\ufffd 1 ][\ufffd\ufffd 2",
        "\ufffd 1 [ \ufffd\ufffd 2 ]') fi := [\ufffd\ufffd 1 ]' fis[\ufffd\ufffd 2 ]' fi It is easy to check that this translation is correct, in the sense that v j= ' iff v j= ' fi . 3 Application: Database Updating Spruit, Wieri=-=nga and Meyer [5]-=- investigate the logic of passive and active insertions into a propositional database. Their database actions turn out to be expressible in our action logic. ffl passive insertion of p: corresponds to minimal way', i.e., by making the smallest possible number of atomic changes. The translation instruction ffl for transforming recomputation formulas into appropriate commands will be given below. In =-=[5]-=- the recomputations ' are proposional formulas in Horn clause form. In fact, there is no harm in allowing recomputations to be an arbitrary propositional formulas, subject to the following conditions:",
        "ch the world may run if I do not act (T is the set of time points). Add a new operator 2', to be interpreted as `' is inevitable if I do not act'. In this setting it is possible to study Von Wright's =-=[6]-=- distinctions: make p: :ps3:pshAi?s[A]p. keep p: ps3:pshAi?s[A]p. end p: ps3pshAi?s[A]:p. prevent p: :ps3pshAi?s[A]:p. A step in a quite different direction would be to look at the internal structure"
    ],
    "cited_paper_doi": [
        "956676",
        "905230",
        "33376",
        "16755",
        "1482716",
        "2715247",
        "8161149"
    ],
    "cited_paper_url": [
        "http://citeseerx.ist.psu.edu/viewdoc/similar?doi=10.1.1.158.6851&type=sc"
    ],
    "doi": "10.1.1.49.4565",
    "title": "Making Things Happen."
}
